import telebot
import config
import keyboard
import re
import parse
import time
import binance_pars
import bitmex_pars
import conf_menu
import lang

language = 0
flag_stream = True

bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    global flag_stream
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ / Choose a language', reply_markup=keyboard.lang_menu())
    conf_menu.list_conf = [' ']
    flag_stream = False


def start_bitmex(m, symbol, lim_max,lim_min):
    global flag_stream
    flag_stream = True
    bot.send_message(m.chat.id, 'Start striming', reply_markup=keyboard.stream_menu_2())
    while flag_stream:
        reply = bitmex_pars.get_trades(symbol,lim_max,lim_min)
        print(reply)
        if reply != None and len(reply)>5:
            bot.send_message(config.chat, reply)
        time.sleep(10)


def start_binance(m, symbol, lim_max,lim_min):
    global flag_stream
    flag_stream = True
    bot.send_message(m.chat.id, 'Start striming', reply_markup=keyboard.stream_menu_2())
    while flag_stream:
        reply = binance_pars.trades(symbol,lim_max,lim_min)
        print(reply)
        if reply != None:
            bot.send_message(config.chat, reply)
        time.sleep(60)


def start_bitfinex(m, symbol, lim_max,lim_min):
    global flag_stream
    flag_stream = True
    bot.send_message(m.chat.id, 'Start striming', reply_markup=keyboard.stream_menu_2())
    while flag_stream:
        reply = parse.trades(symbol, lim_max,lim_min)
        print(reply)
        if reply != None:
            bot.send_message(config.chat, reply[1:])
        time.sleep(60)


@bot.message_handler(commands=['l'])
def set_intr(m):
    try:
        num = m.text.split(' ')
        intr = int(num[1])
        intr1 = int(num[2])
        conf_menu.list_conf.append(intr)
        conf_menu.list_conf.append(intr1)
        bot.send_message(m.chat.id, "–õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=keyboard.stream_menu_1())
    except Exception as l:
        bot.send_message(m.chat.id, str(l) + ' –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')


@bot.message_handler(commands=['m'])
def date(m):
    try:
        msg = m.text.split(' ')
        match = re.search(r'\d+', msg[1])
        if match:
            if round(float(msg[1])) <= 60 and round(float(msg[1])) >= 1:
                conf_menu.list_conf.append(round(float(msg[1])))
                bot.send_message(m.chat.id, lang.en_amm[conf_menu.lang])
            else:
                bot.send_message(m.chat.id, '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ (60 > n > 0)')
        else:
            bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
    except:
        bot.send_message(m.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')


@bot.message_handler(commands=['hist'])
def limit(m):
    mim = m.text.split(' ')
    if len(conf_menu.list_conf) == 3 :
        conf_menu.list_conf.append(float(mim[1]))
        conf_menu.list_conf.append(float(mim[2]))
        print(conf_menu.list_conf[2])
        print(conf_menu.list_conf[3])
        if conf_menu.list_conf[0] == 'binance':
            res = binance_pars.trade_for_period(conf_menu.list_conf[1], conf_menu.list_conf[2],
                                                    conf_menu.list_conf[3],conf_menu.list_conf[4])
            print(res)
            if len(res) < 4000:
                bot.send_message(config.chat, res)
            else:
                bot.send_message(config.chat, res[0:3998] + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
            bot.send_message(m.chat.id,"OK",reply_markup=keyboard.main_menu())
            conf_menu.list_conf = [' ']
        elif conf_menu.list_conf[0] == 'bitfinex':
            res = parse.get_trades(conf_menu.list_conf[1], conf_menu.list_conf[2],
                                                    conf_menu.list_conf[4],conf_menu.list_conf[3])
            print(res)
            if len(res) < 4000:
                bot.send_message(config.chat, res)
            else:
                bot.send_message(config.chat, res[0:3998] + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
            bot.send_message(m.chat.id, "OK", reply_markup=keyboard.main_menu())
            conf_menu.list_conf = [' ']
        elif conf_menu.list_conf[0] == 'bitmex':
            res = bitmex_pars.trade_for_the_period(conf_menu.list_conf[1], conf_menu.list_conf[2],
                                                       conf_menu.list_conf[3])
            print(res)
            if len(res) < 4000:
                bot.send_message(config.chat, res)
            else:
                bot.send_message(config.chat, res[0:3998] + "\n\n–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ")
            bot.send_message(m.chat.id, "OK", reply_markup=keyboard.main_menu())
            conf_menu.list_conf = [' ']
        else:
            bot.send_message(m.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äº')
    else:
        bot.send_message(m.chat.id, lang.error[conf_menu.lang], reply_markup=keyboard.main_menu())
        conf_menu.list_conf = ['']



@bot.message_handler(content_types=['text'])
def menu(m):
    global language
    if m.text == 'Russian üá∑üá∫':
        conf_menu.lang = 0
        bot.send_message(m.chat.id, lang.start[conf_menu.lang], reply_markup=keyboard.main_menu())
    elif m.text == '–°–º–µ–Ω–∏—Ç—å —è–∑–∏–∫' or m.text == 'Change language':
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.lang_menu())
    elif m.text == 'English üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø':
        conf_menu.lang = 1
        bot.send_message(m.chat.id, lang.start[conf_menu.lang], reply_markup=keyboard.main_menu())
    elif m.text == 'Bitmex':
        conf_menu.list_conf[0] = 'bitmex'
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.bitmex_symbol_menu())
        print(conf_menu.list_conf)
    elif m.text == "üî∑BTC" \
            or m.text == "üî∑EOS" \
            or m.text == "üî∑XRP" \
            or m.text == "üî∑TRX" \
            or m.text == "üî∑ADA" \
            or m.text == "üî∑BCH" \
            or m.text == "üî∑LTC" \
            or m.text == "üî∑ETH":
        if m.text == "üî∑BTC":
            conf_menu.list_conf.append('XBT')
            print(conf_menu.list_conf)
            bot.send_message(m.chat.id, m.text, reply_markup=keyboard.coin_menu())
        else:
            conf_menu.list_conf.append(m.text[1:])
            bot.send_message(m.chat.id, m.text, reply_markup=keyboard.coin_menu())
    elif m.text == 'Bitfinex':
        conf_menu.list_conf[0] = 'bitfinex'
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.bitfinex_symbol_menu())
    elif m.text == '‚ùáBTC' \
            or m.text == '‚ùáETH' \
            or m.text == '‚ùáBSV' \
            or m.text == '‚ùáXTZ' \
            or m.text == '‚ùáLTC' \
            or m.text == '‚ùáEOS':
        conf_menu.list_conf.append(m.text[1:])
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.coin_menu())
    elif m.text == "Binance":
        conf_menu.list_conf[0] = 'binance'
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.binance_symbol_menu())
    elif m.text == "üî∂BTC" \
            or m.text == "üî∂BNB" \
            or m.text == "üî∂XRP" \
            or m.text == "üî∂ETH" \
            or m.text == "üî∂BCH" \
            or m.text == "üî∂LTC":
        conf_menu.list_conf.append(m.text[1:])
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.coin_menu())
    elif m.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é ‚¨Ö' or m.text == 'Return to the start menu ‚¨Ö':
        print(m.text == 'Return to the start menu ‚¨Ö')
        bot.send_message(m.chat.id, m.text, reply_markup=keyboard.main_menu())
        conf_menu.list_conf = [' ']
        conf_menu.date = []
    elif m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ üìä' or m.text == 'üìä Statistics for the period üìä':
        bot.send_message(m.chat.id, lang.en_dt[conf_menu.lang])
    elif m.text == '‚ùá –°—Ç–∞—Ä—Ç ‚ùá' or m.text == '‚ùá Start ‚ùá':
        if conf_menu.list_conf[0] == 'bitmex':
            start_bitmex(m, conf_menu.list_conf[1], conf_menu.list_conf[2],conf_menu.list_conf[3])
        if conf_menu.list_conf[0] == 'bitfinex':
            start_bitfinex(m, conf_menu.list_conf[1], conf_menu.list_conf[2],conf_menu.list_conf[3])
        if conf_menu.list_conf[0] == 'binance':
            start_binance(m, conf_menu.list_conf[1], conf_menu.list_conf[2],conf_menu.list_conf[3])
    elif m.text == 'üõë –°—Ç–æ–ø üõë' or m.text == 'üõë Stop üõë':
        global flag_stream
        flag_stream = False
        bot.send_message(m.chat.id, m.text, lang.start[conf_menu.lang], reply_markup=keyboard.main_menu())
        conf_menu.list_conf = [' ']
    elif m.text == '‚ö° –°—Ç—Ä–∏–º —Å–¥–µ–ª–æ–∫ ‚ö°' or m.text == '‚ö° Stream deals ‚ö°':
        bot.send_message(m.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö –ø–æ –ø—Ä–∏–º–µ—Ä—É\n/l <min> <max>')
    else:
        bot.send_message(m.chat.id, lang.error[conf_menu.lang], reply_markup=keyboard.main_menu())
        conf_menu.list_conf = ['']


bot.polling(none_stop=True)
